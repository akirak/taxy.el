#+TITLE: taxy.el

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

# [[https://melpa.org/#/package-name][file:https://melpa.org/packages/taxy-badge.svg]] [[https://stable.melpa.org/#/package-name][file:https://stable.melpa.org/packages/taxy-badge.svg]]

This library provides a way to programmably categorize arbitrary objects into a hierarchical taxonomy.  (That's a lot of fancy words to say that this lets you put things in groups.)

* Examples

This is a silly taxonomy of numbers below 100:

#+BEGIN_SRC elisp
  ("Numbery" "A silly taxonomy of numbers."
   (("< 10" "Numbers below 10"
     (("Odd"
       (1 3 5 7 9))
      ("Even"
       (0 2 4 6 8))))
    ("> 10" "Numbers above 9"
     (("Divisible by 3"
       (12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84
           87 90 93 96 99))
      ("Divisible by 4"
       (12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96))
      ("Divisible by 3 or 4"
       (12 15 16 18 20 21 24 27 28 30 32 33 36 39 40 42 44 45 48 51 52 54 56 57 60
           63 64 66 68 69 72 75 76 78 80 81 84 87 88 90 92 93 96 99))
      ("Not divisible by 3 or 4"
       (10 11 13 14 17 19 22 23 25 26 29 31 34 35 37 38 41 43 46 47 49 50 53 55 58
           59 61 62 65 67 70 71 73 74 77 79 82 83 85 86 89 91 94 95 97 98))))))
#+END_SRC

You might think about how to produce that by writing some imperative code, but =taxy= allows you to do so in a more declarative and functional manner:

#+BEGIN_SRC elisp :exports code
  (require 'taxy)

  (let ((numbery
         (make-taxy :name "Numbery"
                    :description "A silly taxonomy of numbers."
                    :predicate #'numberp
                    :then #'ignore
                    :taxys (list (make-taxy :name "< 10"
                                            :description "Numbers below 10"
                                            :predicate (lambda (n) (< n 10))
                                            :then #'ignore
                                            :taxys (list (make-taxy :name "Odd"
                                                                    :predicate #'oddp
                                                                    :then #'ignore)
                                                         (make-taxy :name "Even"
                                                                    :predicate #'evenp
                                                                    :then #'ignore)))
                                 (make-taxy :name "> 10"
                                            :description "Numbers above 9"
                                            :predicate (lambda (n) (>= n 10))
                                            :then #'ignore
                                            :taxys (list (make-taxy :name "Divisible by 3"
                                                                    :predicate (lambda (n) (zerop (mod n 3)))
                                                                    :then #'identity)
                                                         (make-taxy :name "Divisible by 4"
                                                                    :predicate (lambda (n) (zerop (mod n 4)))
                                                                    :then #'identity)
                                                         (make-taxy :name "Divisible by 3 or 4"
                                                                    :predicate (lambda (n) (or (zerop (mod n 3))
                                                                                               (zerop (mod n 4))))
                                                                    :then #'ignore)
                                                         (make-taxy :name "Not divisible by 3 or 4"
                                                                    :predicate #'identity
                                                                    :then #'ignore))))))
        (numbers (cl-loop for i below 100 collect i)))
    (taxy-simple (taxy-apply numbery (reverse numbers))))
#+END_SRC

The ~taxy-apply~ function applies the numbers in a "cascade" down the hierarchy of "taxys", and the ~taxy-simple~ function returns a meaningful subset of the taxys' slots, suitable for display.

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:
:CONTENTS:
  -  [[#installation][Installation]]
  -  [[#usage][Usage]]
  -  [[#changelog][Changelog]]
  -  [[#credits][Credits]]
  -  [[#development][Development]]
  -  [[#license][License]]
:END:

# * Installation
# :PROPERTIES:
# :TOC:      :depth 0
# :END:
# 
# ** MELPA
# 
# If you installed from MELPA, you're done.  Just run one of the commands below.
# 
# ** Manual
# 
#   Install these required packages:
# 
#   + =foo=
#   + =bar=
# 
#   Then put this file in your load-path, and put this in your init file:
# 
#   #+BEGIN_SRC elisp
# (require 'taxy)
#   #+END_SRC

* Usage
:PROPERTIES:
:TOC:      :depth 0
:END:

A taxy is defined with the ~make-taxy~ constructor, like:

#+BEGIN_SRC elisp
  (make-taxy :name "Numbery"
             :description "A silly taxonomy of numbers."
             :predicate #'numberp
             :then #'ignore
             :taxys (list ...))
#+END_SRC

The ~:predicate~ function determines whether an object fits into that taxy.  If it does, ~taxy-apply~ adds the object to that taxy's descendant ~:taxys~, if present, or to its own ~objects~.

The ~:then~ function determines what happens to an object after being applied: if the function, called with the object, returns a non-nil value, that value is applied to other taxys at the same level until one of them returns nil or no more taxys remain.

After defining a taxy, call ~taxy-apply~ with it and a list of objects to fill the taxy's hierarchy.

To return a taxy in a more human-readable format (with only relevant fields included), use ~taxy-simple~.

# ** Tips
# 
# + You can customize settings in the =taxy= group.

* Changelog
:PROPERTIES:
:TOC:      :depth 0
:END:

** 0.1-pre

Not yet tagged.

# * Credits

* Development

Bug reports, feature requests, suggestions â€” /oh my/!

* License

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:

